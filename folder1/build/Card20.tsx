/**********************************************************************
*
*   Component generated by Quest
*
*   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts. 
*   To preseve that abilty, always export from Quest to regenerate this file.
*   To setup props, bindings and actions, use the Quest editor
*   Code Logic goes in the hook associated with this component
*
*   For help and further details refer to: https://www.quest.ai/docs
*
*
**********************************************************************/

import { Popover, Button } from '@mui/material';
import Q3DotsImage from './assets/images2/_3_dots.png';
import Ellipse1Image from './assets/images2/Ellipse_1.png';
import Ellipse2Image from './assets/images2/Ellipse_2.png';
import { styled } from '@mui/material/styles';
import useCard20 from './useCard20';
 
const TypeQuest: any = styled("div")({  
  backgroundColor: `rgba(84, 213, 254, 1)`,  
  border: `1px solid rgba(25, 118, 210, 1)`,  
  boxSizing: `border-box`,  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  width: `428px`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `10px 0px`,  
  overflow: `hidden`,  
});
  
const Content: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `20px 20px 20px 30px`,  
  boxSizing: `border-box`,  
  alignSelf: `stretch`,  
  margin: `0px`,  
  width: `100%`,  
});
  
const Details: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  alignSelf: `stretch`,  
  margin: `0px`,  
});
  
const TitleTop: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  alignSelf: `stretch`,  
  margin: `0px`,  
});
  
const Title: any = styled("div")(({ theme }: any) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: theme.palette["Text"]["Primary"],  
  fontStyle: `normal`,  
  fontFamily: `Heebo`,  
  fontWeight: `700`,  
  fontSize: `38px`,  
  letterSpacing: `0px`,  
  textDecoration: `underline`,  
  lineHeight: `42px`,  
  textTransform: `none`,  
  flexGrow: `1`,  
  margin: `0px`,  
  cursor: `pointer`,  
}));
  
const Q3Dots: any = styled("img")({  
  height: `20px`,  
  width: `4px`,  
  margin: `0px 0px 0px 10px`,  
});
  
const Frame5: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  alignSelf: `stretch`,  
  margin: `28px 0px 0px 0px`,  
});
  
const Details1: any = styled("div")(({ theme }: any) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: theme.palette["Text"]["Primary"],  
  fontStyle: theme.typography["Typography"]["Body 1"].fontStyle,  
  fontFamily: theme.typography["Typography"]["Body 1"].fontFamily,  
  fontWeight: theme.typography["Typography"]["Body 1"].fontWeight,  
  fontSize: theme.typography["Typography"]["Body 1"].fontSize,  
  letterSpacing: theme.typography["Typography"]["Body 1"].letterSpacing,  
  textDecoration: theme.typography["Typography"]["Body 1"].textDecoration,  
  lineHeight: theme.typography["Typography"]["Body 1"].lineHeight,  
  textTransform: theme.typography["Typography"]["Body 1"].textTransform,  
  alignSelf: `stretch`,  
  margin: `0px`,  
  cursor: `pointer`,  
}));
  
const Btm: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `center`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  width: `350px`,  
  margin: `12px 0px 0px 0px`,  
});
  
const Date: any = styled("div")(({ theme }: any) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: theme.palette["Text"]["Primary"],  
  fontStyle: `normal`,  
  fontFamily: `Heebo`,  
  fontWeight: `400`,  
  fontSize: `14px`,  
  letterSpacing: `0px`,  
  textDecoration: `none`,  
  textTransform: `none`,  
  margin: `0px`,  
}));
  
const Ellipse1: any = styled("img")({  
  height: `4px`,  
  width: `4px`,  
  margin: `0px 0px 0px 8px`,  
});
  
const Events: any = styled("div")(({ theme }: any) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: theme.palette["Text"]["Primary"],  
  fontStyle: `normal`,  
  fontFamily: `Heebo`,  
  fontWeight: `400`,  
  fontSize: `14px`,  
  letterSpacing: `0px`,  
  textDecoration: `none`,  
  textTransform: `none`,  
  margin: `0px 0px 0px 8px`,  
}));
  
const Ellipse2: any = styled("img")({  
  height: `4px`,  
  width: `4px`,  
  margin: `0px 0px 0px 8px`,  
});
  
const Participants: any = styled("div")(({ theme }: any) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: theme.palette["Text"]["Primary"],  
  fontStyle: `normal`,  
  fontFamily: `Heebo`,  
  fontWeight: `400`,  
  fontSize: `14px`,  
  letterSpacing: `0px`,  
  textDecoration: `none`,  
  textTransform: `none`,  
  margin: `0px 0px 0px 8px`,  
}));
  
const Frame4: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `28px 0px 0px 0px`,  
});
  
const ButtonOutlined: any = styled(Button)({  
  margin: `0px`,  
});
 
function Card20(): JSX.Element {
  const {data, fns} = useCard20();
  return (
    <TypeQuest >
       <Popover  
         marginThreshold={0}
         anchorEl={props.anchorEl}
         anchorOrigin={{vertical: 'top', horizontal: 'left'}}
         transformOrigin={{vertical: 'top', horizontal: 'left'}}
         keepMounted
         transitionDuration={0}
         open={Boolean(props.anchorEl)}
         onClose={undefined}
         sx = {{"& .MuiPopover-paper": {width: ""300px""}}}
         >
         <Content >
           <Details >
             <TitleTop >
               <Title onClick={fns.ClickTest(anything2)} >
                 {`Lorem ipsum test to be see`}
                   </Title>
               <Q3Dots  src={Q3DotsImage} alt={"3 dots"}/>
             </TitleTop>
             <Frame5 >
               <Details1 onClick={fns.onClick2(stuff, stuff2)} >
                 {`Lorem ipsum test to be seen and not read for placement only. Lorem ipsum dolar test to be seen. Lorem ipsum test to be seen and not read for placement only. Lorem ipsum test that is only to be seen.`}
                   </Details1>
               <Btm >
                 <Date >
                   {`June 11, 2022`}
                     </Date>
                 <Ellipse1  src={Ellipse1Image} alt={"Ellipse 1"}/>
                 <Events >
                   {`15 Events`}
                     </Events>
                 <Ellipse2  src={Ellipse2Image} alt={"Ellipse 2"}/>
                 <Participants >
                   {`105 Participants`}
                     </Participants>
               </Btm>
             </Frame5>
             <Frame4 >
               {(data.isVisble) &&
                   <ButtonOutlined variant="outlined" size="large" color="info"  onClick={fns.PressedBtn}  > undefined </ButtonOutlined>
               }
             </Frame4>
           </Details>
         </Content>
       </Popover>
     </TypeQuest>
   );
}

export default Card20;
